Using device: cuda
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
Traceback (most recent call last):
  File "/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py", line 72, in <module>
    main()
  File "/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py", line 65, in main
    avg_loss = train(model, train_loader, optimizer, device)
  File "/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py", line 42, in train
    output = model(img)
  File "/net/tscratch/people/plgmpniak/miniconda3/envs/kits23-unet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/net/tscratch/people/plgmpniak/miniconda3/envs/kits23-unet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/unet_3d.py", line 39, in forward
    d1 = self.decoder1(torch.cat((self.up1(d2), e1), dim=1))
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 40 but got size 41 for tensor number 1 in the list.

Using device: cuda
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.8710
[Batch 10] Dice Loss: 0.8605
[Batch 15] Dice Loss: 0.8575
[Batch 20] Dice Loss: 0.8497
[Batch 25] Dice Loss: 0.8506
[Batch 30] Dice Loss: 0.8459
[Batch 35] Dice Loss: 0.8340
[Batch 40] Dice Loss: 0.8360
[Batch 45] Dice Loss: 0.8283
[Batch 50] Dice Loss: 0.7794
[Batch 55] Dice Loss: 0.8276
[Batch 60] Dice Loss: 0.8234
[Batch 65] Dice Loss: 0.8326
[Batch 70] Dice Loss: 0.8253
[Batch 75] Dice Loss: 0.8051
[Batch 80] Dice Loss: 0.7733
[Batch 85] Dice Loss: 0.7935
[Batch 90] Dice Loss: 0.7960
[Batch 95] Dice Loss: 0.7980
[Batch 100] Dice Loss: 0.7556
[Batch 105] Dice Loss: 0.8081
[Batch 110] Dice Loss: 0.8098
[Batch 115] Dice Loss: 0.8130
[Batch 120] Dice Loss: 0.8267
[Batch 125] Dice Loss: 0.8125
[Batch 130] Dice Loss: 0.7716
[Batch 135] Dice Loss: 0.7699
[Batch 140] Dice Loss: 0.8035
[Batch 145] Dice Loss: 0.7728
[Batch 150] Dice Loss: 0.7328
[Batch 155] Dice Loss: 0.7941
[Batch 160] Dice Loss: 0.7927
[Batch 165] Dice Loss: 0.7492
[Batch 170] Dice Loss: 0.7807
[Batch 175] Dice Loss: 0.8100
[Batch 180] Dice Loss: 0.7768
[Batch 185] Dice Loss: 0.7770
[Batch 190] Dice Loss: 0.7306
[Batch 195] Dice Loss: 0.7996
[Batch 200] Dice Loss: 0.7880
[Batch 205] Dice Loss: 0.7475
[Batch 210] Dice Loss: 0.7728
[Batch 215] Dice Loss: 0.7544
[Batch 220] Dice Loss: 0.7748
[Batch 225] Dice Loss: 0.7509
[Batch 230] Dice Loss: 0.7478
[Batch 235] Dice Loss: 0.7388
[Batch 240] Dice Loss: 0.7841
[Batch 245] Dice Loss: 0.7702
[Batch 250] Dice Loss: 0.7356
[Batch 255] Dice Loss: 0.7519
[Batch 260] Dice Loss: 0.7648
[Batch 265] Dice Loss: 0.7084
[Batch 270] Dice Loss: 0.7040
[Batch 275] Dice Loss: 0.7679
[Batch 280] Dice Loss: 0.7515
[Batch 285] Dice Loss: 0.7864
[Batch 290] Dice Loss: 0.7608
[Batch 295] Dice Loss: 0.6956
[Batch 300] Dice Loss: 0.7110
[Batch 305] Dice Loss: 0.7160
[Batch 310] Dice Loss: 0.7581
[Batch 315] Dice Loss: 0.6808
[Batch 320] Dice Loss: 0.6724
[Batch 325] Dice Loss: 0.6892
[Batch 330] Dice Loss: 0.7074
[Batch 335] Dice Loss: 0.7596
[Batch 340] Dice Loss: 0.7548
[Batch 345] Dice Loss: 0.6454
[Batch 350] Dice Loss: 0.7399
[Batch 355] Dice Loss: 0.6416
[Batch 360] Dice Loss: 0.7116
[Batch 365] Dice Loss: 0.7680
[Batch 370] Dice Loss: 0.6517
[Batch 375] Dice Loss: 0.7693
[Batch 380] Dice Loss: 0.7190
[Batch 385] Dice Loss: 0.6645
[Batch 390] Dice Loss: 0.7295
[Batch 395] Dice Loss: 0.7219
[Batch 400] Dice Loss: 0.7072
[Batch 405] Dice Loss: 0.6358
[Batch 410] Dice Loss: 0.7247
[Batch 415] Dice Loss: 0.6930
[Batch 420] Dice Loss: 0.6314
[Batch 425] Dice Loss: 0.6234
[Batch 430] Dice Loss: 0.7030
[Batch 435] Dice Loss: 0.7524
[Batch 440] Dice Loss: 0.7069
[Batch 445] Dice Loss: 0.6797
[Batch 450] Dice Loss: 0.7041
[Batch 455] Dice Loss: 0.6997
[Batch 460] Dice Loss: 0.7053
[Batch 465] Dice Loss: 0.7000
[Batch 470] Dice Loss: 0.6441
[Batch 475] Dice Loss: 0.6122
[Batch 480] Dice Loss: 0.5961
[Batch 485] Dice Loss: 0.6074
Epoch 1/10 - Avg Dice Loss: 0.7472
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.6831
[Batch 10] Dice Loss: 0.6742
[Batch 15] Dice Loss: 0.6902
[Batch 20] Dice Loss: 0.6939
[Batch 25] Dice Loss: 0.5841
[Batch 30] Dice Loss: 0.6248
[Batch 35] Dice Loss: 0.6273
[Batch 40] Dice Loss: 0.6834
[Batch 45] Dice Loss: 0.6242
[Batch 50] Dice Loss: 0.7402
[Batch 55] Dice Loss: 0.6348
[Batch 60] Dice Loss: 0.7139
[Batch 65] Dice Loss: 0.6434
[Batch 70] Dice Loss: 0.6449
[Batch 75] Dice Loss: 0.6050
[Batch 80] Dice Loss: 0.5452
[Batch 85] Dice Loss: 0.6658
[Batch 90] Dice Loss: 0.6086
[Batch 95] Dice Loss: 0.6415
[Batch 100] Dice Loss: 0.6701
[Batch 105] Dice Loss: 0.7149
[Batch 110] Dice Loss: 0.6660
[Batch 115] Dice Loss: 0.6278
[Batch 120] Dice Loss: 0.6228
[Batch 125] Dice Loss: 0.6242
[Batch 130] Dice Loss: 0.6557
[Batch 135] Dice Loss: 0.6115
[Batch 140] Dice Loss: 0.7121
[Batch 145] Dice Loss: 0.6496
[Batch 150] Dice Loss: 0.6674
[Batch 155] Dice Loss: 0.5987
[Batch 160] Dice Loss: 0.5989
[Batch 165] Dice Loss: 0.6257
[Batch 170] Dice Loss: 0.5835
[Batch 175] Dice Loss: 0.6466
[Batch 180] Dice Loss: 0.5755
[Batch 185] Dice Loss: 0.6005
[Batch 190] Dice Loss: 0.6332
[Batch 195] Dice Loss: 0.5641
[Batch 200] Dice Loss: 0.5996
[Batch 205] Dice Loss: 0.5965
[Batch 210] Dice Loss: 0.5729
[Batch 215] Dice Loss: 0.5963
[Batch 220] Dice Loss: 0.6066
[Batch 225] Dice Loss: 0.5888
[Batch 230] Dice Loss: 0.5922
[Batch 235] Dice Loss: 0.5601
[Batch 240] Dice Loss: 0.5418
[Batch 245] Dice Loss: 0.6381
[Batch 250] Dice Loss: 0.7408
[Batch 255] Dice Loss: 0.5762
[Batch 260] Dice Loss: 0.5747
[Batch 265] Dice Loss: 0.6192
[Batch 270] Dice Loss: 0.5473
[Batch 275] Dice Loss: 0.6131
[Batch 280] Dice Loss: 0.5687
[Batch 285] Dice Loss: 0.5279
[Batch 290] Dice Loss: 0.5717
[Batch 295] Dice Loss: 0.5614
[Batch 300] Dice Loss: 0.5741
[Batch 305] Dice Loss: 0.5530
[Batch 310] Dice Loss: 0.5296
[Batch 315] Dice Loss: 0.5469
[Batch 320] Dice Loss: 0.5539
[Batch 325] Dice Loss: 0.5738
[Batch 330] Dice Loss: 0.5812
[Batch 335] Dice Loss: 0.5546
[Batch 340] Dice Loss: 0.5049
[Batch 345] Dice Loss: 0.5358
[Batch 350] Dice Loss: 0.5253
[Batch 355] Dice Loss: 0.7087
[Batch 360] Dice Loss: 0.5896
[Batch 365] Dice Loss: 0.5721
[Batch 370] Dice Loss: 0.5388
[Batch 375] Dice Loss: 0.5871
[Batch 380] Dice Loss: 0.5389
[Batch 385] Dice Loss: 0.5516
[Batch 390] Dice Loss: 0.7424
[Batch 395] Dice Loss: 0.6013
[Batch 400] Dice Loss: 0.4807
[Batch 405] Dice Loss: 0.5728
[Batch 410] Dice Loss: 0.5545
[Batch 415] Dice Loss: 0.5364
[Batch 420] Dice Loss: 0.6057
[Batch 425] Dice Loss: 0.5449
[Batch 430] Dice Loss: 0.5409
[Batch 435] Dice Loss: 0.4310
[Batch 440] Dice Loss: 0.5605
[Batch 445] Dice Loss: 0.4735
[Batch 450] Dice Loss: 0.6033
[Batch 455] Dice Loss: 0.5741
[Batch 460] Dice Loss: 0.5844
[Batch 465] Dice Loss: 0.5601
[Batch 470] Dice Loss: 0.5318
[Batch 475] Dice Loss: 0.5451
[Batch 480] Dice Loss: 0.5313
[Batch 485] Dice Loss: 0.5760
Epoch 2/10 - Avg Dice Loss: 0.5972
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.5827
[Batch 10] Dice Loss: 0.4788
[Batch 15] Dice Loss: 0.4778
[Batch 20] Dice Loss: 0.5522
[Batch 25] Dice Loss: 0.5640
[Batch 30] Dice Loss: 0.5579
[Batch 35] Dice Loss: 0.6185
[Batch 40] Dice Loss: 0.5909
[Batch 45] Dice Loss: 0.5172
[Batch 50] Dice Loss: 0.4748
[Batch 55] Dice Loss: 0.5575
[Batch 60] Dice Loss: 0.5581
[Batch 65] Dice Loss: 0.5544
[Batch 70] Dice Loss: 0.5394
[Batch 75] Dice Loss: 0.5218
[Batch 80] Dice Loss: 0.7044
[Batch 85] Dice Loss: 0.6536
[Batch 90] Dice Loss: 0.6072
[Batch 95] Dice Loss: 0.5898
[Batch 100] Dice Loss: 0.4806
[Batch 105] Dice Loss: 0.5602
[Batch 110] Dice Loss: 0.5248
[Batch 115] Dice Loss: 0.4977
[Batch 120] Dice Loss: 0.5244
[Batch 125] Dice Loss: 0.6149
[Batch 130] Dice Loss: 0.4792
[Batch 135] Dice Loss: 0.5153
[Batch 140] Dice Loss: 0.5190
[Batch 145] Dice Loss: 0.5683
[Batch 150] Dice Loss: 0.5138
[Batch 155] Dice Loss: 0.6862
[Batch 160] Dice Loss: 0.5717
[Batch 165] Dice Loss: 0.5276
[Batch 170] Dice Loss: 0.5586
[Batch 175] Dice Loss: 0.5649
[Batch 180] Dice Loss: 0.5349
[Batch 185] Dice Loss: 0.5363
[Batch 190] Dice Loss: 0.5385
[Batch 195] Dice Loss: 0.5184
[Batch 200] Dice Loss: 0.5146
[Batch 205] Dice Loss: 0.4277
[Batch 210] Dice Loss: 0.6193
[Batch 215] Dice Loss: 0.4912
[Batch 220] Dice Loss: 0.5233
[Batch 225] Dice Loss: 0.5316
[Batch 230] Dice Loss: 0.5110
[Batch 235] Dice Loss: 0.5561
[Batch 240] Dice Loss: 0.5324
[Batch 245] Dice Loss: 0.5204
[Batch 250] Dice Loss: 0.4651
[Batch 255] Dice Loss: 0.3682
[Batch 260] Dice Loss: 0.5405
[Batch 265] Dice Loss: 0.5221
[Batch 270] Dice Loss: 0.5034
[Batch 275] Dice Loss: 0.6152
[Batch 280] Dice Loss: 0.5853
[Batch 285] Dice Loss: 0.4984
[Batch 290] Dice Loss: 0.4818
[Batch 295] Dice Loss: 0.5358
[Batch 300] Dice Loss: 0.4728
[Batch 305] Dice Loss: 0.5426
[Batch 310] Dice Loss: 0.5243
[Batch 315] Dice Loss: 0.4329
[Batch 320] Dice Loss: 0.5284
[Batch 325] Dice Loss: 0.5747
[Batch 330] Dice Loss: 0.4212
[Batch 335] Dice Loss: 0.7591
[Batch 340] Dice Loss: 0.5385
[Batch 345] Dice Loss: 0.5455
[Batch 350] Dice Loss: 0.5555
[Batch 355] Dice Loss: 0.5271
[Batch 360] Dice Loss: 0.5318
[Batch 365] Dice Loss: 0.5377
[Batch 370] Dice Loss: 0.5243
[Batch 375] Dice Loss: 0.5440
[Batch 380] Dice Loss: 0.5519
[Batch 385] Dice Loss: 0.4451
[Batch 390] Dice Loss: 0.5245
[Batch 395] Dice Loss: 0.4249
[Batch 400] Dice Loss: 0.5281
[Batch 405] Dice Loss: 0.5548
[Batch 410] Dice Loss: 0.4927
[Batch 415] Dice Loss: 0.4369
[Batch 420] Dice Loss: 0.4709
[Batch 425] Dice Loss: 0.5187
[Batch 430] Dice Loss: 0.4449
[Batch 435] Dice Loss: 0.3951
[Batch 440] Dice Loss: 0.5197
[Batch 445] Dice Loss: 0.5229
[Batch 450] Dice Loss: 0.5315
[Batch 455] Dice Loss: 0.4178
[Batch 460] Dice Loss: 0.5003
[Batch 465] Dice Loss: 0.5582
[Batch 470] Dice Loss: 0.4136
[Batch 475] Dice Loss: 0.5034
[Batch 480] Dice Loss: 0.5404
[Batch 485] Dice Loss: 0.6527
Epoch 3/10 - Avg Dice Loss: 0.5329
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.4082
[Batch 10] Dice Loss: 0.5154
[Batch 15] Dice Loss: 0.4611
[Batch 20] Dice Loss: 0.5587
[Batch 25] Dice Loss: 0.5252
[Batch 30] Dice Loss: 0.5102
[Batch 35] Dice Loss: 0.4773
[Batch 40] Dice Loss: 0.4204
[Batch 45] Dice Loss: 0.4751
[Batch 50] Dice Loss: 0.5211
[Batch 55] Dice Loss: 0.4980
[Batch 60] Dice Loss: 0.5155
[Batch 65] Dice Loss: 0.5003
[Batch 70] Dice Loss: 0.5218
[Batch 75] Dice Loss: 0.5082
[Batch 80] Dice Loss: 0.5360
[Batch 85] Dice Loss: 0.4507
[Batch 90] Dice Loss: 0.5684
[Batch 95] Dice Loss: 0.4630
[Batch 100] Dice Loss: 0.5457
[Batch 105] Dice Loss: 0.5218
[Batch 110] Dice Loss: 0.5489
[Batch 115] Dice Loss: 0.4275
[Batch 120] Dice Loss: 0.4683
[Batch 125] Dice Loss: 0.5530
[Batch 130] Dice Loss: 0.5461
[Batch 135] Dice Loss: 0.5163
[Batch 140] Dice Loss: 0.4551
[Batch 145] Dice Loss: 0.4617
[Batch 150] Dice Loss: 0.3849
[Batch 155] Dice Loss: 0.5551
[Batch 160] Dice Loss: 0.5491
[Batch 165] Dice Loss: 0.7475
[Batch 170] Dice Loss: 0.5501
[Batch 175] Dice Loss: 0.5308
[Batch 180] Dice Loss: 0.4806
[Batch 185] Dice Loss: 0.4998
[Batch 190] Dice Loss: 0.5130
[Batch 195] Dice Loss: 0.5319
[Batch 200] Dice Loss: 0.4181
[Batch 205] Dice Loss: 0.3955
[Batch 210] Dice Loss: 0.5699
[Batch 215] Dice Loss: 0.5157
[Batch 220] Dice Loss: 0.5417
[Batch 225] Dice Loss: 0.4232
[Batch 230] Dice Loss: 0.5603
[Batch 235] Dice Loss: 0.4869
[Batch 240] Dice Loss: 0.5369
[Batch 245] Dice Loss: 0.5296
[Batch 250] Dice Loss: 0.5098
[Batch 255] Dice Loss: 0.4487
[Batch 260] Dice Loss: 0.5338
[Batch 265] Dice Loss: 0.5566
[Batch 270] Dice Loss: 0.5698
[Batch 275] Dice Loss: 0.4588
[Batch 280] Dice Loss: 0.4915
[Batch 285] Dice Loss: 0.5310
[Batch 290] Dice Loss: 0.5121
[Batch 295] Dice Loss: 0.4937
[Batch 300] Dice Loss: 0.5178
[Batch 305] Dice Loss: 0.3888
[Batch 310] Dice Loss: 0.5110
[Batch 315] Dice Loss: 0.7017
[Batch 320] Dice Loss: 0.5302
[Batch 325] Dice Loss: 0.5097
[Batch 330] Dice Loss: 0.5628
[Batch 335] Dice Loss: 0.5235
[Batch 340] Dice Loss: 0.5884
[Batch 345] Dice Loss: 0.4908
[Batch 350] Dice Loss: 0.4870
[Batch 355] Dice Loss: 0.4733
[Batch 360] Dice Loss: 0.5273
[Batch 365] Dice Loss: 0.3802
[Batch 370] Dice Loss: 0.7335
[Batch 375] Dice Loss: 0.3741
[Batch 380] Dice Loss: 0.5367
[Batch 385] Dice Loss: 0.5076
[Batch 390] Dice Loss: 0.4773
[Batch 395] Dice Loss: 0.5245
[Batch 400] Dice Loss: 0.5204
[Batch 405] Dice Loss: 0.5554
[Batch 410] Dice Loss: 0.5510
[Batch 415] Dice Loss: 0.4596
[Batch 420] Dice Loss: 0.5398
[Batch 425] Dice Loss: 0.5040
[Batch 430] Dice Loss: 0.6658
[Batch 435] Dice Loss: 0.4932
[Batch 440] Dice Loss: 0.4375
[Batch 445] Dice Loss: 0.5273
[Batch 450] Dice Loss: 0.4904
[Batch 455] Dice Loss: 0.5724
[Batch 460] Dice Loss: 0.4659
[Batch 465] Dice Loss: 0.4582
[Batch 470] Dice Loss: 0.3956
[Batch 475] Dice Loss: 0.5501
[Batch 480] Dice Loss: 0.5212
[Batch 485] Dice Loss: 0.4741
Epoch 4/10 - Avg Dice Loss: 0.4995
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.5167
[Batch 10] Dice Loss: 0.5719
[Batch 15] Dice Loss: 0.6159
[Batch 20] Dice Loss: 0.3976
[Batch 25] Dice Loss: 0.5200
[Batch 30] Dice Loss: 0.5326
[Batch 35] Dice Loss: 0.5342
[Batch 40] Dice Loss: 0.3597
[Batch 45] Dice Loss: 0.5286
[Batch 50] Dice Loss: 0.5149
[Batch 55] Dice Loss: 0.5108
[Batch 60] Dice Loss: 0.3602
[Batch 65] Dice Loss: 0.5245
[Batch 70] Dice Loss: 0.5024
[Batch 75] Dice Loss: 0.3774
[Batch 80] Dice Loss: 0.4203
[Batch 85] Dice Loss: 0.4923
[Batch 90] Dice Loss: 0.5184
[Batch 95] Dice Loss: 0.5375
[Batch 100] Dice Loss: 0.5486
[Batch 105] Dice Loss: 0.4320
[Batch 110] Dice Loss: 0.5480
[Batch 115] Dice Loss: 0.4049
[Batch 120] Dice Loss: 0.4327
[Batch 125] Dice Loss: 0.4263
[Batch 130] Dice Loss: 0.3946
[Batch 135] Dice Loss: 0.5424
[Batch 140] Dice Loss: 0.5344
[Batch 145] Dice Loss: 0.4081
[Batch 150] Dice Loss: 0.3673
[Batch 155] Dice Loss: 0.5455
[Batch 160] Dice Loss: 0.4117
[Batch 165] Dice Loss: 0.5075
[Batch 170] Dice Loss: 0.4897
[Batch 175] Dice Loss: 0.3533
[Batch 180] Dice Loss: 0.5149
[Batch 185] Dice Loss: 0.3395
[Batch 190] Dice Loss: 0.5232
[Batch 195] Dice Loss: 0.3976
[Batch 200] Dice Loss: 0.4982
[Batch 205] Dice Loss: 0.4785
[Batch 210] Dice Loss: 0.5717
[Batch 215] Dice Loss: 0.5758
[Batch 220] Dice Loss: 0.5116
[Batch 225] Dice Loss: 0.4538
[Batch 230] Dice Loss: 0.5301
[Batch 235] Dice Loss: 0.5042
[Batch 240] Dice Loss: 0.4310
[Batch 245] Dice Loss: 0.4976
[Batch 250] Dice Loss: 0.5161
[Batch 255] Dice Loss: 0.5347
[Batch 260] Dice Loss: 0.4071
[Batch 265] Dice Loss: 0.5088
[Batch 270] Dice Loss: 0.5173
[Batch 275] Dice Loss: 0.5653
[Batch 280] Dice Loss: 0.5566
[Batch 285] Dice Loss: 0.5709
[Batch 290] Dice Loss: 0.5760
[Batch 295] Dice Loss: 0.5448
[Batch 300] Dice Loss: 0.5341
[Batch 305] Dice Loss: 0.4320
[Batch 310] Dice Loss: 0.4962
[Batch 315] Dice Loss: 0.5193
[Batch 320] Dice Loss: 0.5515
[Batch 325] Dice Loss: 0.4749
[Batch 330] Dice Loss: 0.5627
[Batch 335] Dice Loss: 0.3416
[Batch 340] Dice Loss: 0.5846
[Batch 345] Dice Loss: 0.4989
[Batch 350] Dice Loss: 0.4145
[Batch 355] Dice Loss: 0.5759
[Batch 360] Dice Loss: 0.5254
[Batch 365] Dice Loss: 0.4582
[Batch 370] Dice Loss: 0.5233
[Batch 375] Dice Loss: 0.4296
[Batch 380] Dice Loss: 0.3974
[Batch 385] Dice Loss: 0.5933
[Batch 390] Dice Loss: 0.3610
[Batch 395] Dice Loss: 0.4242
[Batch 400] Dice Loss: 0.4356
[Batch 405] Dice Loss: 0.5790
[Batch 410] Dice Loss: 0.3694
[Batch 415] Dice Loss: 0.5380
[Batch 420] Dice Loss: 0.5526
[Batch 425] Dice Loss: 0.6010
[Batch 430] Dice Loss: 0.4975
[Batch 435] Dice Loss: 0.5149
[Batch 440] Dice Loss: 0.5448
[Batch 445] Dice Loss: 0.3672
[Batch 450] Dice Loss: 0.4427
[Batch 455] Dice Loss: 0.5177
[Batch 460] Dice Loss: 0.3709
[Batch 465] Dice Loss: 0.5171
[Batch 470] Dice Loss: 0.4781
[Batch 475] Dice Loss: 0.3155
[Batch 480] Dice Loss: 0.3445
[Batch 485] Dice Loss: 0.3977
Epoch 5/10 - Avg Dice Loss: 0.4824
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.5061
[Batch 10] Dice Loss: 0.4987
[Batch 15] Dice Loss: 0.4461
[Batch 20] Dice Loss: 0.4259
[Batch 25] Dice Loss: 0.4992
[Batch 30] Dice Loss: 0.3872
[Batch 35] Dice Loss: 0.5146
[Batch 40] Dice Loss: 0.4395
[Batch 45] Dice Loss: 0.4465
[Batch 50] Dice Loss: 0.5323
[Batch 55] Dice Loss: 0.3606
[Batch 60] Dice Loss: 0.4044
[Batch 65] Dice Loss: 0.4705
[Batch 70] Dice Loss: 0.4094
[Batch 75] Dice Loss: 0.3964
[Batch 80] Dice Loss: 0.5241
[Batch 85] Dice Loss: 0.4564
[Batch 90] Dice Loss: 0.5341
[Batch 95] Dice Loss: 0.3706
[Batch 100] Dice Loss: 0.5239
[Batch 105] Dice Loss: 0.3682
[Batch 110] Dice Loss: 0.4243
[Batch 115] Dice Loss: 0.5729
[Batch 120] Dice Loss: 0.3466
[Batch 125] Dice Loss: 0.3455
[Batch 130] Dice Loss: 0.4852
[Batch 135] Dice Loss: 0.5135
[Batch 140] Dice Loss: 0.5078
[Batch 145] Dice Loss: 0.4192
[Batch 150] Dice Loss: 0.5235
[Batch 155] Dice Loss: 0.3033
[Batch 160] Dice Loss: 0.4517
[Batch 165] Dice Loss: 0.3243
[Batch 170] Dice Loss: 0.5409
[Batch 175] Dice Loss: 0.6016
[Batch 180] Dice Loss: 0.4256
[Batch 185] Dice Loss: 0.5027
[Batch 190] Dice Loss: 0.4741
[Batch 195] Dice Loss: 0.4017
[Batch 200] Dice Loss: 0.5559
[Batch 205] Dice Loss: 0.4652
[Batch 210] Dice Loss: 0.3952
[Batch 215] Dice Loss: 0.4998
[Batch 220] Dice Loss: 0.5585
[Batch 225] Dice Loss: 0.3793
[Batch 230] Dice Loss: 0.5279
[Batch 235] Dice Loss: 0.5065
[Batch 240] Dice Loss: 0.5758
[Batch 245] Dice Loss: 0.5053
[Batch 250] Dice Loss: 0.4763
[Batch 255] Dice Loss: 0.4435
[Batch 260] Dice Loss: 0.4190
[Batch 265] Dice Loss: 0.5125
[Batch 270] Dice Loss: 0.5144
[Batch 275] Dice Loss: 0.3875
[Batch 280] Dice Loss: 0.4317
[Batch 285] Dice Loss: 0.4103
[Batch 290] Dice Loss: 0.4353
[Batch 295] Dice Loss: 0.4614
[Batch 300] Dice Loss: 0.4122
[Batch 305] Dice Loss: 0.4483
[Batch 310] Dice Loss: 0.5167
[Batch 315] Dice Loss: 0.4881
[Batch 320] Dice Loss: 0.3919
[Batch 325] Dice Loss: 0.4399
[Batch 330] Dice Loss: 0.3414
[Batch 335] Dice Loss: 0.4166
[Batch 340] Dice Loss: 0.5277
[Batch 345] Dice Loss: 0.5322
[Batch 350] Dice Loss: 0.4213
[Batch 355] Dice Loss: 0.5213
[Batch 360] Dice Loss: 0.5150
[Batch 365] Dice Loss: 0.4926
[Batch 370] Dice Loss: 0.3652
[Batch 375] Dice Loss: 0.5091
[Batch 380] Dice Loss: 0.5135
[Batch 385] Dice Loss: 0.3507
[Batch 390] Dice Loss: 0.4736
[Batch 395] Dice Loss: 0.4146
[Batch 400] Dice Loss: 0.4563
[Batch 405] Dice Loss: 0.4458
[Batch 410] Dice Loss: 0.4598
[Batch 415] Dice Loss: 0.5837
[Batch 420] Dice Loss: 0.3951
[Batch 425] Dice Loss: 0.3879
[Batch 430] Dice Loss: 0.3944
[Batch 435] Dice Loss: 0.4162
[Batch 440] Dice Loss: 0.5056
[Batch 445] Dice Loss: 0.4500
[Batch 450] Dice Loss: 0.3175
[Batch 455] Dice Loss: 0.5341
[Batch 460] Dice Loss: 0.3587
[Batch 465] Dice Loss: 0.4192
[Batch 470] Dice Loss: 0.6269
[Batch 475] Dice Loss: 0.5187
[Batch 480] Dice Loss: 0.5043
[Batch 485] Dice Loss: 0.5176
Epoch 6/10 - Avg Dice Loss: 0.4675
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.4311
[Batch 10] Dice Loss: 0.3687
[Batch 15] Dice Loss: 0.3853
[Batch 20] Dice Loss: 0.5036
[Batch 25] Dice Loss: 0.6151
[Batch 30] Dice Loss: 0.4118
[Batch 35] Dice Loss: 0.4885
[Batch 40] Dice Loss: 0.5095
[Batch 45] Dice Loss: 0.3757
[Batch 50] Dice Loss: 0.4668
[Batch 55] Dice Loss: 0.5034
[Batch 60] Dice Loss: 0.3628
[Batch 65] Dice Loss: 0.5165
[Batch 70] Dice Loss: 0.5263
[Batch 75] Dice Loss: 0.6013
[Batch 80] Dice Loss: 0.3304
[Batch 85] Dice Loss: 0.5327
[Batch 90] Dice Loss: 0.4197
[Batch 95] Dice Loss: 0.5149
[Batch 100] Dice Loss: 0.4948
[Batch 105] Dice Loss: 0.4567
[Batch 110] Dice Loss: 0.4100
[Batch 115] Dice Loss: 0.4470
[Batch 120] Dice Loss: 0.5235
[Batch 125] Dice Loss: 0.5818
[Batch 130] Dice Loss: 0.5060
[Batch 135] Dice Loss: 0.4817
[Batch 140] Dice Loss: 0.3610
[Batch 145] Dice Loss: 0.4367
[Batch 150] Dice Loss: 0.3695
[Batch 155] Dice Loss: 0.3865
[Batch 160] Dice Loss: 0.4476
[Batch 165] Dice Loss: 0.3316
[Batch 170] Dice Loss: 0.4565
[Batch 175] Dice Loss: 0.4478
[Batch 180] Dice Loss: 0.3394
[Batch 185] Dice Loss: 0.3825
[Batch 190] Dice Loss: 0.5137
[Batch 195] Dice Loss: 0.5637
[Batch 200] Dice Loss: 0.2864
[Batch 205] Dice Loss: 0.4493
[Batch 210] Dice Loss: 0.5464
[Batch 215] Dice Loss: 0.4373
[Batch 220] Dice Loss: 0.4426
[Batch 225] Dice Loss: 0.3472
[Batch 230] Dice Loss: 0.4851
[Batch 235] Dice Loss: 0.5446
[Batch 240] Dice Loss: 0.3170
[Batch 245] Dice Loss: 0.5084
[Batch 250] Dice Loss: 0.5185
[Batch 255] Dice Loss: 0.3178
[Batch 260] Dice Loss: 0.3454
[Batch 265] Dice Loss: 0.5132
[Batch 270] Dice Loss: 0.5081
[Batch 275] Dice Loss: 0.2954
[Batch 280] Dice Loss: 0.5081
[Batch 285] Dice Loss: 0.3369
[Batch 290] Dice Loss: 0.4178
[Batch 295] Dice Loss: 0.2426
[Batch 300] Dice Loss: 0.4181
[Batch 305] Dice Loss: 0.5498
[Batch 310] Dice Loss: 0.3820
[Batch 315] Dice Loss: 0.5450
[Batch 320] Dice Loss: 0.4356
[Batch 325] Dice Loss: 0.5181
[Batch 330] Dice Loss: 0.3594
[Batch 335] Dice Loss: 0.5085
[Batch 340] Dice Loss: 0.2934
[Batch 345] Dice Loss: 0.4495
[Batch 350] Dice Loss: 0.5707
[Batch 355] Dice Loss: 0.4929
[Batch 360] Dice Loss: 0.5027
[Batch 365] Dice Loss: 0.5103
[Batch 370] Dice Loss: 0.4679
[Batch 375] Dice Loss: 0.4408
[Batch 380] Dice Loss: 0.4065
[Batch 385] Dice Loss: 0.4197
[Batch 390] Dice Loss: 0.4719
[Batch 395] Dice Loss: 0.5405
[Batch 400] Dice Loss: 0.3149
[Batch 405] Dice Loss: 0.4194
[Batch 410] Dice Loss: 0.4073
[Batch 415] Dice Loss: 0.3691
[Batch 420] Dice Loss: 0.4046
[Batch 425] Dice Loss: 0.4382
[Batch 430] Dice Loss: 0.5015
[Batch 435] Dice Loss: 0.3922
[Batch 440] Dice Loss: 0.4084
[Batch 445] Dice Loss: 0.4072
[Batch 450] Dice Loss: 0.4605
[Batch 455] Dice Loss: 0.4773
[Batch 460] Dice Loss: 0.3662
[Batch 465] Dice Loss: 0.5090
[Batch 470] Dice Loss: 0.5206
[Batch 475] Dice Loss: 0.4642
[Batch 480] Dice Loss: 0.4908
[Batch 485] Dice Loss: 0.6837
Epoch 7/10 - Avg Dice Loss: 0.4516
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.3543
[Batch 10] Dice Loss: 0.3803
[Batch 15] Dice Loss: 0.5015
[Batch 20] Dice Loss: 0.3356
[Batch 25] Dice Loss: 0.4363
[Batch 30] Dice Loss: 0.4308
[Batch 35] Dice Loss: 0.5910
[Batch 40] Dice Loss: 0.3767
[Batch 45] Dice Loss: 0.3771
[Batch 50] Dice Loss: 0.4840
[Batch 55] Dice Loss: 0.4800
[Batch 60] Dice Loss: 0.3931
[Batch 65] Dice Loss: 0.3903
[Batch 70] Dice Loss: 0.4402
[Batch 75] Dice Loss: 0.5382
[Batch 80] Dice Loss: 0.3239
[Batch 85] Dice Loss: 0.4271
[Batch 90] Dice Loss: 0.4289
[Batch 95] Dice Loss: 0.5244
[Batch 100] Dice Loss: 0.2862
[Batch 105] Dice Loss: 0.5120
[Batch 110] Dice Loss: 0.5177
[Batch 115] Dice Loss: 0.5125
[Batch 120] Dice Loss: 0.4356
[Batch 125] Dice Loss: 0.4084
[Batch 130] Dice Loss: 0.4383
[Batch 135] Dice Loss: 0.5062
[Batch 140] Dice Loss: 0.4533
[Batch 145] Dice Loss: 0.3836
[Batch 150] Dice Loss: 0.4829
[Batch 155] Dice Loss: 0.4247
[Batch 160] Dice Loss: 0.4818
[Batch 165] Dice Loss: 0.4812
[Batch 170] Dice Loss: 0.4586
[Batch 175] Dice Loss: 0.3162
[Batch 180] Dice Loss: 0.4594
[Batch 185] Dice Loss: 0.5367
[Batch 190] Dice Loss: 0.5244
[Batch 195] Dice Loss: 0.4193
[Batch 200] Dice Loss: 0.5007
[Batch 205] Dice Loss: 0.3653
[Batch 210] Dice Loss: 0.3950
[Batch 215] Dice Loss: 0.3303
[Batch 220] Dice Loss: 0.4089
[Batch 225] Dice Loss: 0.6293
[Batch 230] Dice Loss: 0.4199
[Batch 235] Dice Loss: 0.5376
[Batch 240] Dice Loss: 0.4886
[Batch 245] Dice Loss: 0.3177
[Batch 250] Dice Loss: 0.4900
[Batch 255] Dice Loss: 0.3059
[Batch 260] Dice Loss: 0.3615
[Batch 265] Dice Loss: 0.4791
[Batch 270] Dice Loss: 0.5390
[Batch 275] Dice Loss: 0.3505
[Batch 280] Dice Loss: 0.5579
[Batch 285] Dice Loss: 0.4619
[Batch 290] Dice Loss: 0.4347
[Batch 295] Dice Loss: 0.5957
[Batch 300] Dice Loss: 0.6120
[Batch 305] Dice Loss: 0.4172
[Batch 310] Dice Loss: 0.5108
[Batch 315] Dice Loss: 0.4170
[Batch 320] Dice Loss: 0.4480
[Batch 325] Dice Loss: 0.4075
[Batch 330] Dice Loss: 0.4292
[Batch 335] Dice Loss: 0.5171
[Batch 340] Dice Loss: 0.4295
[Batch 345] Dice Loss: 0.3755
[Batch 350] Dice Loss: 0.3087
[Batch 355] Dice Loss: 0.3695
[Batch 360] Dice Loss: 0.3740
[Batch 365] Dice Loss: 0.2616
[Batch 370] Dice Loss: 0.4921
[Batch 375] Dice Loss: 0.4718
[Batch 380] Dice Loss: 0.5168
[Batch 385] Dice Loss: 0.5116
[Batch 390] Dice Loss: 0.6747
[Batch 395] Dice Loss: 0.5602
[Batch 400] Dice Loss: 0.3892
[Batch 405] Dice Loss: 0.4916
[Batch 410] Dice Loss: 0.5466
[Batch 415] Dice Loss: 0.3092
[Batch 420] Dice Loss: 0.5294
[Batch 425] Dice Loss: 0.3231
[Batch 430] Dice Loss: 0.4788
[Batch 435] Dice Loss: 0.3505
[Batch 440] Dice Loss: 0.3800
[Batch 445] Dice Loss: 0.3291
[Batch 450] Dice Loss: 0.3792
[Batch 455] Dice Loss: 0.4380
[Batch 460] Dice Loss: 0.5073
[Batch 465] Dice Loss: 0.5223
[Batch 470] Dice Loss: 0.3949
[Batch 475] Dice Loss: 0.4101
[Batch 480] Dice Loss: 0.5078
[Batch 485] Dice Loss: 0.5419
Epoch 8/10 - Avg Dice Loss: 0.4371
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.3861
[Batch 10] Dice Loss: 0.4038
[Batch 15] Dice Loss: 0.5566
[Batch 20] Dice Loss: 0.4686
[Batch 25] Dice Loss: 0.3226
[Batch 30] Dice Loss: 0.3644
[Batch 35] Dice Loss: 0.5345
[Batch 40] Dice Loss: 0.3539
[Batch 45] Dice Loss: 0.4994
[Batch 50] Dice Loss: 0.4680
[Batch 55] Dice Loss: 0.3871
[Batch 60] Dice Loss: 0.4028
[Batch 65] Dice Loss: 0.4792
[Batch 70] Dice Loss: 0.3342
[Batch 75] Dice Loss: 0.3544
[Batch 80] Dice Loss: 0.4866
[Batch 85] Dice Loss: 0.4224
[Batch 90] Dice Loss: 0.2881
[Batch 95] Dice Loss: 0.4057
[Batch 100] Dice Loss: 0.3846
[Batch 105] Dice Loss: 0.4994
[Batch 110] Dice Loss: 0.3221
[Batch 115] Dice Loss: 0.6317
[Batch 120] Dice Loss: 0.3861
[Batch 125] Dice Loss: 0.3281
[Batch 130] Dice Loss: 0.3939
[Batch 135] Dice Loss: 0.2537
[Batch 140] Dice Loss: 0.4095
[Batch 145] Dice Loss: 0.4324
[Batch 150] Dice Loss: 0.5457
[Batch 155] Dice Loss: 0.3785
[Batch 160] Dice Loss: 0.3962
[Batch 165] Dice Loss: 0.3412
[Batch 170] Dice Loss: 0.5031
[Batch 175] Dice Loss: 0.4670
[Batch 180] Dice Loss: 0.5385
[Batch 185] Dice Loss: 0.3921
[Batch 190] Dice Loss: 0.5361
[Batch 195] Dice Loss: 0.4205
[Batch 200] Dice Loss: 0.3586
[Batch 205] Dice Loss: 0.6661
[Batch 210] Dice Loss: 0.4858
[Batch 215] Dice Loss: 0.5162
[Batch 220] Dice Loss: 0.2921
[Batch 225] Dice Loss: 0.5520
[Batch 230] Dice Loss: 0.3728
[Batch 235] Dice Loss: 0.3922
[Batch 240] Dice Loss: 0.4067
[Batch 245] Dice Loss: 0.5203
[Batch 250] Dice Loss: 0.3733
[Batch 255] Dice Loss: 0.4214
[Batch 260] Dice Loss: 0.4768
[Batch 265] Dice Loss: 0.4771
[Batch 270] Dice Loss: 0.5008
[Batch 275] Dice Loss: 0.3273
[Batch 280] Dice Loss: 0.5839
[Batch 285] Dice Loss: 0.3075
[Batch 290] Dice Loss: 0.5287
[Batch 295] Dice Loss: 0.5487
[Batch 300] Dice Loss: 0.3773
[Batch 305] Dice Loss: 0.5547
[Batch 310] Dice Loss: 0.4705
[Batch 315] Dice Loss: 0.4128
[Batch 320] Dice Loss: 0.3509
[Batch 325] Dice Loss: 0.4673
[Batch 330] Dice Loss: 0.4443
[Batch 335] Dice Loss: 0.5059
[Batch 340] Dice Loss: 0.5216
[Batch 345] Dice Loss: 0.3780
[Batch 350] Dice Loss: 0.4168
[Batch 355] Dice Loss: 0.4656
[Batch 360] Dice Loss: 0.1942
[Batch 365] Dice Loss: 0.4423
[Batch 370] Dice Loss: 0.5305
[Batch 375] Dice Loss: 0.4909
[Batch 380] Dice Loss: 0.5089
[Batch 385] Dice Loss: 0.4865
[Batch 390] Dice Loss: 0.4389
[Batch 395] Dice Loss: 0.4885
[Batch 400] Dice Loss: 0.5689
[Batch 405] Dice Loss: 0.3831
[Batch 410] Dice Loss: 0.3658
[Batch 415] Dice Loss: 0.3915
[Batch 420] Dice Loss: 0.3487
[Batch 425] Dice Loss: 0.5062
[Batch 430] Dice Loss: 0.4997
[Batch 435] Dice Loss: 0.3498
[Batch 440] Dice Loss: 0.4546
[Batch 445] Dice Loss: 0.4806
[Batch 450] Dice Loss: 0.5171
[Batch 455] Dice Loss: 0.4176
[Batch 460] Dice Loss: 0.4953
[Batch 465] Dice Loss: 0.4184
[Batch 470] Dice Loss: 0.4308
[Batch 475] Dice Loss: 0.3969
[Batch 480] Dice Loss: 0.4305
[Batch 485] Dice Loss: 0.5331
Epoch 9/10 - Avg Dice Loss: 0.4287
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/kits23/models/train_unet_3d.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  item = torch.load(self.files[idx])
[Batch 5] Dice Loss: 0.4380
[Batch 10] Dice Loss: 0.4691
[Batch 15] Dice Loss: 0.4368
[Batch 20] Dice Loss: 0.3967
[Batch 25] Dice Loss: 0.3479
[Batch 30] Dice Loss: 0.5024
[Batch 35] Dice Loss: 0.3305
[Batch 40] Dice Loss: 0.4100
[Batch 45] Dice Loss: 0.4801
[Batch 50] Dice Loss: 0.5278
[Batch 55] Dice Loss: 0.4766
[Batch 60] Dice Loss: 0.4977
[Batch 65] Dice Loss: 0.2903
[Batch 70] Dice Loss: 0.3474
[Batch 75] Dice Loss: 0.2249
[Batch 80] Dice Loss: 0.3269
[Batch 85] Dice Loss: 0.3625
[Batch 90] Dice Loss: 0.2942
[Batch 95] Dice Loss: 0.3770
[Batch 100] Dice Loss: 0.5070
[Batch 105] Dice Loss: 0.4179
[Batch 110] Dice Loss: 0.3031
[Batch 115] Dice Loss: 0.5356
[Batch 120] Dice Loss: 0.1852
[Batch 125] Dice Loss: 0.5090
[Batch 130] Dice Loss: 0.5871
[Batch 135] Dice Loss: 0.5065
[Batch 140] Dice Loss: 0.4933
[Batch 145] Dice Loss: 0.5246
[Batch 150] Dice Loss: 0.5249
[Batch 155] Dice Loss: 0.5016
[Batch 160] Dice Loss: 0.3553
[Batch 165] Dice Loss: 0.5386
[Batch 170] Dice Loss: 0.5768
[Batch 175] Dice Loss: 0.5032
[Batch 180] Dice Loss: 0.5316
[Batch 185] Dice Loss: 0.5002
[Batch 190] Dice Loss: 0.4907
[Batch 195] Dice Loss: 0.3223
[Batch 200] Dice Loss: 0.5290
[Batch 205] Dice Loss: 0.3098
[Batch 210] Dice Loss: 0.4431
[Batch 215] Dice Loss: 0.5141
[Batch 220] Dice Loss: 0.4158
[Batch 225] Dice Loss: 0.4059
[Batch 230] Dice Loss: 0.4821
[Batch 235] Dice Loss: 0.4439
[Batch 240] Dice Loss: 0.4493
[Batch 245] Dice Loss: 0.5220
[Batch 250] Dice Loss: 0.4679
[Batch 255] Dice Loss: 0.4804
[Batch 260] Dice Loss: 0.3157
[Batch 265] Dice Loss: 0.5127
[Batch 270] Dice Loss: 0.3075
[Batch 275] Dice Loss: 0.5006
[Batch 280] Dice Loss: 0.3142
[Batch 285] Dice Loss: 0.3275
[Batch 290] Dice Loss: 0.4579
[Batch 295] Dice Loss: 0.4573
[Batch 300] Dice Loss: 0.3643
[Batch 305] Dice Loss: 0.4670
[Batch 310] Dice Loss: 0.3185
[Batch 315] Dice Loss: 0.4561
[Batch 320] Dice Loss: 0.1454
[Batch 325] Dice Loss: 0.4827
[Batch 330] Dice Loss: 0.5679
[Batch 335] Dice Loss: 0.3759
[Batch 340] Dice Loss: 0.3352
[Batch 345] Dice Loss: 0.3447
[Batch 350] Dice Loss: 0.3616
[Batch 355] Dice Loss: 0.5321
[Batch 360] Dice Loss: 0.5681
[Batch 365] Dice Loss: 0.3417
[Batch 370] Dice Loss: 0.4374
[Batch 375] Dice Loss: 0.4662
[Batch 380] Dice Loss: 0.3155
[Batch 385] Dice Loss: 0.4015
[Batch 390] Dice Loss: 0.4593
[Batch 395] Dice Loss: 0.4877
[Batch 400] Dice Loss: 0.2851
[Batch 405] Dice Loss: 0.5220
[Batch 410] Dice Loss: 0.4010
[Batch 415] Dice Loss: 0.4559
[Batch 420] Dice Loss: 0.5032
[Batch 425] Dice Loss: 0.4231
[Batch 430] Dice Loss: 0.4726
[Batch 435] Dice Loss: 0.5102
[Batch 440] Dice Loss: 0.4425
[Batch 445] Dice Loss: 0.4450
[Batch 450] Dice Loss: 0.3413
[Batch 455] Dice Loss: 0.7577
[Batch 460] Dice Loss: 0.5064
[Batch 465] Dice Loss: 0.3868
[Batch 470] Dice Loss: 0.3876
[Batch 475] Dice Loss: 0.4424
[Batch 480] Dice Loss: 0.3433
[Batch 485] Dice Loss: 0.4632
Epoch 10/10 - Avg Dice Loss: 0.4180
Model saved to model.pt

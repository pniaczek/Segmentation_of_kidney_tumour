/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:119: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = GradScaler()
Device: cuda
GPU: NVIDIA A100-SXM4-40GB
Counting voxels in 10 samples:   0%|          | 0/10 [00:00<?, ?it/s]/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:93: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  label = torch.load(path, map_location="cpu")["label"]  # shape: [D, H, W]
Counting voxels in 10 samples:  10%|█         | 1/10 [00:00<00:03,  2.57it/s]Counting voxels in 10 samples:  20%|██        | 2/10 [00:00<00:02,  3.13it/s]Counting voxels in 10 samples:  30%|███       | 3/10 [00:00<00:02,  3.32it/s]Counting voxels in 10 samples:  40%|████      | 4/10 [00:01<00:01,  3.36it/s]Counting voxels in 10 samples:  50%|█████     | 5/10 [00:01<00:01,  3.50it/s]Counting voxels in 10 samples:  60%|██████    | 6/10 [00:01<00:01,  3.55it/s]Counting voxels in 10 samples:  70%|███████   | 7/10 [00:02<00:00,  3.51it/s]Counting voxels in 10 samples:  80%|████████  | 8/10 [00:02<00:00,  3.55it/s]Counting voxels in 10 samples:  90%|█████████ | 9/10 [00:02<00:00,  3.45it/s]Counting voxels in 10 samples: 100%|██████████| 10/10 [00:02<00:00,  3.53it/s]Counting voxels in 10 samples: 100%|██████████| 10/10 [00:02<00:00,  3.43it/s]
[Partial] Class voxel counts: [214940320.0, 4681127.0, 526861.0, 52663.0]
[Partial] Computed class weights: [0.0002204435004387051, 0.010121962986886501, 0.08993300795555115, 0.899724543094635]
Training:   0%|          | 0/391 [00:00<?, ?it/s]/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:60: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(path)
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:60: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(path)
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:60: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(path)
/net/tscratch/people/plgmpniak/KITS_project/Kits_23/kits23/models/3DUnet.py:60: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(path)
Training:   0%|          | 1/391 [00:16<1:44:52, 16.13s/it]Training:   1%|          | 2/391 [00:16<45:41,  7.05s/it]  Training:   1%|          | 3/391 [00:17<26:48,  4.15s/it]Training:   1%|          | 4/391 [00:18<17:54,  2.78s/it]Training:   1%|▏         | 5/391 [00:25<29:00,  4.51s/it]Training:   2%|▏         | 6/391 [00:27<22:19,  3.48s/it]Training:   2%|▏         | 7/391 [00:30<21:08,  3.30s/it]Training:   2%|▏         | 8/391 [00:30<15:46,  2.47s/it]Training:   2%|▏         | 9/391 [00:39<27:41,  4.35s/it]Training:   3%|▎         | 10/391 [00:43<26:24,  4.16s/it]Training:   3%|▎         | 11/391 [00:43<19:35,  3.09s/it]slurmstepd: error: *** JOB 1559063 ON t0017 CANCELLED AT 2025-07-24T20:31:21 DUE TO TIME LIMIT ***
Training:   3%|▎         | 12/391 [00:44<14:54,  2.36s/it]